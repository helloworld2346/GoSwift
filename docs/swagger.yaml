basePath: /api/v1
definitions:
  handlers.HealthResponse:
    properties:
      database:
        type: string
      env:
        type: string
      message:
        type: string
      redis:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  models.ConversationResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      last_message:
        $ref: '#/definitions/models.Message'
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/models.User'
        type: array
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateConversationRequest:
    properties:
      created_by:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      type:
        enum:
        - direct
        - group
        type: string
      user_ids:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - name
    - type
    - user_ids
    type: object
  models.CreateUserRequest:
    properties:
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - display_name
    - email
    - password
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Message:
    properties:
      content:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_read:
        type: boolean
      message_type:
        description: '"text", "image", "file"'
        type: string
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        type: string
      sender_name:
        description: Virtual fields for joins
        type: string
      updated_at:
        type: string
    type: object
  models.MessageResponse:
    properties:
      content:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_read:
        type: boolean
      message_type:
        type: string
      sender_id:
        type: string
      sender_name:
        type: string
      updated_at:
        type: string
    type: object
  models.SendMessageRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
      conversation_id:
        type: string
      message_type:
        enum:
        - text
        - image
        - file
        type: string
    required:
    - content
    - conversation_id
    - message_type
    type: object
  models.User:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      id:
        type: string
      is_online:
        type: boolean
      last_seen:
        type: string
      updated_at:
        type: string
    type: object
  models.UserResponse:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      id:
        type: string
      is_online:
        type: boolean
      last_seen:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A real-time webchat application built with Go
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoSwift API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /conversations:
    get:
      description: Get all conversations for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ConversationResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user conversations
      tags:
      - chat
    post:
      consumes:
      - application/json
      description: Create a new conversation (direct or group)
      parameters:
      - description: Conversation details
        in: body
        name: conversation
        required: true
        schema:
          $ref: '#/definitions/models.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ConversationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new conversation
      tags:
      - chat
  /conversations/{id}:
    get:
      description: Get details of a specific conversation
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ConversationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation details
      tags:
      - chat
  /conversations/{id}/messages:
    get:
      description: Get messages for a conversation with pagination
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of messages to return (default: 50, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of messages to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MessageResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation messages
      tags:
      - chat
    post:
      consumes:
      - application/json
      description: Send a message to a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: Message details
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Send a message
      tags:
      - chat
  /conversations/{id}/messages/{message_id}/read:
    post:
      description: Mark a specific message as read
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: Message ID
        in: path
        name: message_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark message as read
      tags:
      - chat
  /health:
    get:
      consumes:
      - application/json
      description: Get server health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check
      tags:
      - health
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get user profile
      tags:
      - users
  /users/online:
    get:
      consumes:
      - application/json
      description: Get list of currently online users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get online users
      tags:
      - users
  /users/search:
    get:
      consumes:
      - application/json
      description: Search users by display name or email
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Search users
      tags:
      - users
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
