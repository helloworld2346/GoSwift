package main

import (
	"log"

	"goswift/internal/cache"
	"goswift/internal/database"
	"goswift/internal/router"
	"goswift/pkg/utils"

	_ "goswift/docs" // This is generated by swag
)

// @title GoSwift API
// @version 1.0
// @description A real-time webchat application built with Go
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

// @security BearerAuth

func main() {
	// Load configuration
	config := utils.LoadConfig()

	// Connect to database
	db, err := database.NewConnection(config)
	if err != nil {
		log.Fatal("‚ùå Failed to connect to database:", err)
	}
	defer db.Close()

	// Connect to Redis
	redisClient, err := cache.NewRedisConnection(config)
	if err != nil {
		log.Fatal("‚ùå Failed to connect to Redis:", err)
	}
	defer redisClient.Close()

	// Setup router
	r := router.SetupRouter(config, db, redisClient)

	// Start server
	addr := ":" + config.ServerPort
	log.Printf("üöÄ Starting GoSwift server on %s", addr)
	log.Printf("üåç Environment: %s", config.Env)
	log.Printf("üìö Swagger docs available at: http://localhost%s/swagger/index.html", addr)

	if err := r.Run(addr); err != nil {
		log.Fatal("‚ùå Failed to start server:", err)
	}
}
